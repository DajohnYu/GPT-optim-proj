{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# How to combine GPTV with RAG - Create an Outfit Assistant\n",
    "\n",
    "Welcome to the Clothing Matchmaker App Jupyter Notebook! This project demonstrates the power of the GPT-4-vision model in analyzing images of clothing items and extracting key features such as color, style, and type. The core of our app relies on this advanced image analysis model developed by OpenAI, which enables us to accurately identify the characteristics of the input clothing item.\n",
    "\n",
    "GPT-4-vision is a model that combines natural language processing with image recognition, allowing it to understand and generate responses based on both text and visual inputs.\n",
    "\n",
    "Building on the capabilities of the GPT-4-vision model, we employ a custom matching algorithm and the RAG technique to search our knowledge base for items that complement the identified features. This algorithm takes into account factors like color compatibility and style coherence to provide users with suitable recommendations. Through this notebook, we aim to showcase the practical application of these technologies in creating a clothing recommendation system."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Environment Setup"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First we will install the necessary dependencies, then import the libraries and write some util functions that we will use later on. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Note: you may need to restart the kernel to use updated packages.\n",
      "Note: you may need to restart the kernel to use updated packages.\n",
      "Note: you may need to restart the kernel to use updated packages.\n",
      "Note: you may need to restart the kernel to use updated packages.\n",
      "Note: you may need to restart the kernel to use updated packages.\n",
      "Note: you may need to restart the kernel to use updated packages.\n",
      "\u001b[31mERROR: Could not find a version that satisfies the requirement concurrent (from versions: none)\u001b[0m\u001b[31m\n",
      "\u001b[0m\u001b[31mERROR: No matching distribution found for concurrent\u001b[0m\u001b[31m\n",
      "\u001b[0mNote: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "%pip install openai --quiet\n",
    "%pip install tenacity --quiet\n",
    "%pip install tqdm --quiet\n",
    "%pip install numpy --quiet\n",
    "%pip install typing --quiet\n",
    "%pip install tiktoken --quiet\n",
    "%pip install concurrent --quiet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import json\n",
    "import ast\n",
    "import tiktoken\n",
    "import concurrent\n",
    "from openai import OpenAI\n",
    "from tqdm import tqdm\n",
    "from tenacity import retry, wait_random_exponential, stop_after_attempt\n",
    "from IPython.display import Image, display, HTML\n",
    "from typing import List\n",
    "\n",
    "client = OpenAI()\n",
    "\n",
    "GPT_MODEL = \"gpt-4-vision-preview\"\n",
    "EMBEDDING_MODEL = \"text-embedding-3-large\"\n",
    "EMBEDDING_COST_PER_1K_TOKENS = 0.00013"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Creating the Embeddings\n",
    "We will now set up the knowledge base by choosing a database and generating embeddings for it. I am using the `styles_filtered.csv` file for this in the data folder. This step can also be replaced by using an out of the box vector database. For example, you can follow one of [these cookbooks](https://github.com/openai/openai-cookbook/tree/main/examples/vector_databases) to set up your vector database."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      id gender masterCategory subCategory  articleType baseColour  season  \\\n",
      "0  15970    Men        Apparel     Topwear       Shirts  Navy Blue    Fall   \n",
      "1  39386    Men        Apparel  Bottomwear        Jeans       Blue  Summer   \n",
      "2  21379    Men        Apparel  Bottomwear  Track Pants      Black    Fall   \n",
      "3  53759    Men        Apparel     Topwear      Tshirts       Grey  Summer   \n",
      "4   1855    Men        Apparel     Topwear      Tshirts       Grey  Summer   \n",
      "\n",
      "     year   usage                             productDisplayName  \n",
      "0  2011.0  Casual               Turtle Check Men Navy Blue Shirt  \n",
      "1  2012.0  Casual             Peter England Men Party Blue Jeans  \n",
      "2  2011.0  Casual  Manchester United Men Solid Black Track Pants  \n",
      "3  2012.0  Casual                          Puma Men Grey T-shirt  \n",
      "4  2011.0  Casual           Inkfruit Mens Chain Reaction T-shirt  \n",
      "Opened dataset successfully. Dataset has 28939 items of clothing.\n"
     ]
    }
   ],
   "source": [
    "styles_filepath = \"data/clothes/styles_filtered.csv\"\n",
    "styles_df = pd.read_csv(styles_filepath, on_bad_lines='skip')\n",
    "print(styles_df.head())\n",
    "print(\"Opened dataset successfully. Dataset has {} items of clothing.\".format(len(styles_df)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we will generate embeddings for the entire dataset. Given the amount of entries we have, we wrote some parrallelization logic to execute these embedding faster. With this logic, the time to create embeddings decreases from ~2h to ~1min. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Batch Embedding Logic\n",
    "\n",
    "# Simple function to take in a list of text objects and return them as a list of embeddings\n",
    "@retry(wait=wait_random_exponential(min=1, max=40), stop=stop_after_attempt(10))\n",
    "def get_embeddings(input: List):\n",
    "    response = client.embeddings.create(\n",
    "        input=input,\n",
    "        model=EMBEDDING_MODEL\n",
    "    ).data\n",
    "    return [data.embedding for data in response]\n",
    "\n",
    "\n",
    "# Splits an iterable into batches of size n.\n",
    "def batchify(iterable, n=1):\n",
    "    l = len(iterable)\n",
    "    for ndx in range(0, l, n):\n",
    "        yield iterable[ndx : min(ndx + n, l)]\n",
    "     \n",
    "\n",
    "# Function for batching and parallel processing the embeddings\n",
    "def embed_corpus(\n",
    "    corpus: List[str],\n",
    "    batch_size=64,\n",
    "    num_workers=8,\n",
    "    max_context_len=8191,\n",
    "):\n",
    "    # Encode the corpus, truncating to max_context_len\n",
    "    encoding = tiktoken.get_encoding(\"cl100k_base\")\n",
    "    encoded_corpus = [\n",
    "        encoded_article[:max_context_len] for encoded_article in encoding.encode_batch(corpus)\n",
    "    ]\n",
    "\n",
    "    # Calculate corpus statistics: the number of inputs, the total number of tokens, and the estimated cost to embed\n",
    "    num_tokens = sum(len(article) for article in encoded_corpus)\n",
    "    cost_to_embed_tokens = num_tokens / 1000 * EMBEDDING_COST_PER_1K_TOKENS\n",
    "    print(\n",
    "        f\"num_articles={len(encoded_corpus)}, num_tokens={num_tokens}, est_embedding_cost={cost_to_embed_tokens:.2f} USD\"\n",
    "    )\n",
    "\n",
    "    # Embed the corpus\n",
    "    with concurrent.futures.ThreadPoolExecutor(max_workers=num_workers) as executor:\n",
    "        \n",
    "        futures = [\n",
    "            executor.submit(get_embeddings, text_batch)\n",
    "            for text_batch in batchify(encoded_corpus, batch_size)\n",
    "        ]\n",
    "\n",
    "        with tqdm(total=len(encoded_corpus)) as pbar:\n",
    "            for _ in concurrent.futures.as_completed(futures):\n",
    "                pbar.update(batch_size)\n",
    "\n",
    "        embeddings = []\n",
    "        for future in futures:\n",
    "            data = future.result()\n",
    "            embeddings.extend(data)\n",
    "\n",
    "        return embeddings\n",
    "    \n",
    "\n",
    "# Function to generate embeddings for a given column in a DataFrame\n",
    "def generate_embeddings(df, column_name):\n",
    "    # Initialize an empty list to store embeddings\n",
    "    descriptions = df[column_name].astype(str).tolist()\n",
    "    embeddings = embed_corpus(descriptions)\n",
    "\n",
    "    # Add the embeddings as a new column to the DataFrame\n",
    "    df['embeddings'] = embeddings\n",
    "    print(\"Embeddings created successfully.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The next line will create the embeddings for the entire clothes dataset. This will take ~1m to process ans another ~2-3 mins to write the results to a local .csv file. The process is using our ```text_embedding_3_large``` model which is priced at ```$0.00013/1K``` tokens. Given that the dataset has ```~29K``` entries, the following operation will cost ```~$0.03```. \n",
    "\n",
    "If you would not like to proceed with creating your own embeddings, we will use a dataset of pre-computed embeddings. You can skip this cell and uncomment the code in the following cell to proceed with loaded the pre-computed vectors. This operation takes ~5minutes to load all the data in memory."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "num_articles=28939, num_tokens=240577, est_embedding_cost=0.03 USD\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "28992it [02:37, 184.05it/s]                           \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Embeddings created successfully.\n",
      "Writing embeddings to file ...\n",
      "Embeddings successfully stored in styles_filtered_with_embeddings.csv\n"
     ]
    }
   ],
   "source": [
    "generate_embeddings(styles_df, 'productDisplayName')\n",
    "print(\"Writing embeddings to file ...\")\n",
    "styles_df.to_csv('data/clothes/styles_filtered_with_embeddings.csv', index=False)\n",
    "print(\"Embeddings successfully stored in styles_filtered_with_embeddings.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      id gender masterCategory subCategory  articleType baseColour  season  \\\n",
      "0  15970    Men        Apparel     Topwear       Shirts  Navy Blue    Fall   \n",
      "1  39386    Men        Apparel  Bottomwear        Jeans       Blue  Summer   \n",
      "2  21379    Men        Apparel  Bottomwear  Track Pants      Black    Fall   \n",
      "3  53759    Men        Apparel     Topwear      Tshirts       Grey  Summer   \n",
      "4   1855    Men        Apparel     Topwear      Tshirts       Grey  Summer   \n",
      "\n",
      "     year   usage                             productDisplayName  \\\n",
      "0  2011.0  Casual               Turtle Check Men Navy Blue Shirt   \n",
      "1  2012.0  Casual             Peter England Men Party Blue Jeans   \n",
      "2  2011.0  Casual  Manchester United Men Solid Black Track Pants   \n",
      "3  2012.0  Casual                          Puma Men Grey T-shirt   \n",
      "4  2011.0  Casual           Inkfruit Mens Chain Reaction T-shirt   \n",
      "\n",
      "                                          embeddings  \n",
      "0  [-0.04859153553843498, 0.007310436572879553, -...  \n",
      "1  [-0.03897429257631302, 0.019768662750720978, -...  \n",
      "2  [-0.0008280429756268859, 0.043054744601249695,...  \n",
      "3  [0.005530208814889193, 0.03796585649251938, -0...  \n",
      "4  [-0.011632026173174381, -0.006124322302639484,...  \n",
      "Opened dataset successfully. Dataset has 28939 items of clothing along with their embeddings.\n"
     ]
    }
   ],
   "source": [
    "# styles_df = pd.read_csv('data/clothes/styles_filtered_with_embeddings.csv', on_bad_lines='skip')\n",
    "\n",
    "# # Convert the 'embeddings' column from string representations of lists to actual lists of floats\n",
    "# styles_df['embeddings'] = styles_df['embeddings'].apply(lambda x: ast.literal_eval(x))\n",
    "\n",
    "print(styles_df.head())\n",
    "print(\"Opened dataset successfully. Dataset has {} items of clothing along with their embeddings.\".format(len(styles_df)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Building the Matching Algorithm\n",
    "\n",
    "In this section, we'll develop a cosine similarity retrieval algorithm to find similar items in our dataframe. We'll utilize our custom cosine similarity function for this purpose. While the `sklearn` library offers a built-in cosine similarity function, recent updates to its SDK have led to compatibility issues, prompting us to implement our own standard cosine similarity calculation.\n",
    "\n",
    "If you already have a vector database set up, you can skip this step. Most standard databases come with their own search functions, which simplify the subsequent steps outlined in this guide. However, we aim to demonstrate that the matching algorithm can be tailored to meet specific requirements, such as a particular threshold or a specified number of matches returned.\n",
    "\n",
    "The `find_similar_items` function accepts four parameters:\n",
    "- `embedding`: The embedding for which we want to find a match.\n",
    "- `embeddings`: A list of embeddings to search through for the best matches.\n",
    "- `threshold` (optional): This parameter specifies the minimum similarity score for a match to be considered valid. A higher threshold results in closer (better) matches, while a lower threshold allows for more items to be returned, though they may not be as closely matched to the initial `embedding`.\n",
    "- `top_k` (optional): This parameter determines the number of items to return that exceed the given threshold. These will be the top-scoring matches for the provided `embedding`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def cosine_similarity_manual(vec1, vec2):\n",
    "    \"\"\"Calculate the cosine similarity between two vectors.\"\"\"\n",
    "    vec1 = np.array(vec1, dtype=float)\n",
    "    vec2 = np.array(vec2, dtype=float)\n",
    "\n",
    "\n",
    "    dot_product = np.dot(vec1, vec2)\n",
    "    norm_vec1 = np.linalg.norm(vec1)\n",
    "    norm_vec2 = np.linalg.norm(vec2)\n",
    "    return dot_product / (norm_vec1 * norm_vec2)\n",
    "\n",
    "\n",
    "def find_similar_items(embedding, embeddings, threshold=0.5, top_k=2):\n",
    "    \"\"\"Find the most similar items based on cosine similarity.\"\"\"\n",
    "    \n",
    "    # Calculate cosine similarity between the input embedding and all other embeddings\n",
    "    similarities = [(index, cosine_similarity_manual(embedding, vec)) for index, vec in enumerate(embeddings)]\n",
    "    \n",
    "    # Filter out any similarities below the threshold\n",
    "    filtered_similarities = [(index, sim) for index, sim in similarities if sim >= threshold]\n",
    "    \n",
    "    # Sort the filtered similarities by similarity score\n",
    "    sorted_indices = sorted(filtered_similarities, key=lambda x: x[1], reverse=True)[:top_k]\n",
    "\n",
    "    # Return the top-k most similar items\n",
    "    return sorted_indices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def find_matching_items_with_rag(df_items, item_descs):\n",
    "   \"\"\"Take the input item descriptions and find the most similar items based on cosine similarity for each description.\"\"\"\n",
    "   \n",
    "   # Select the embeddings from the DataFrame.\n",
    "   embeddings = df_items['embeddings'].tolist()\n",
    "\n",
    "   \n",
    "   similar_items = []\n",
    "   for desc in item_descs:\n",
    "      \n",
    "      # Generate the embedding for the input item\n",
    "      input_embedding = get_embeddings([desc])\n",
    "    \n",
    "      # Find the most similar items based on cosine similarity\n",
    "      similar_indices = find_similar_items(input_embedding, embeddings, threshold=0.6)\n",
    "      similar_items += [df_items.iloc[i] for i in similar_indices]\n",
    "    \n",
    "   return similar_items"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Analysis Module\n",
    "\n",
    "In this module, we leverage `gpt-4-vision-preview` to analyze input images and extract important features like detailed descriptions, styles, and types. The analysis is performed through a straightforward API call, where we provide the URL of the image for analysis and request the model to identify relevant features.\n",
    "\n",
    "To ensure the model returns accurate results, we use specific techniques in our prompt:\n",
    "\n",
    "1. **Output Format Specification**: We instruct the model to return a JSON block with a predefined structure, consisting of:\n",
    "   - `items` (str[]): A list of strings, each representing a concise title for an item of clothing, including style, color, and gender. These titles closely resemble the `productDisplayName` property in our original database.\n",
    "   - `category` (str): The category that best represents the given item. The model selects from a list of all unique `articleTypes` present in the original styles dataframe.\n",
    "   - `gender` (str): A label indicating the gender the item is intended for. The model chooses from the options `[Men, Women, Boys, Girls, Unisex]`.\n",
    "\n",
    "2. **Clear and Concise Instructions**: \n",
    "   - We provide clear instructions on what the item titles should include and what the output format should be. The output should be in JSON format, but without the `json` tag that the model response normally contains.\n",
    "\n",
    "3. **One Shot Example**: \n",
    "   - To further clarify the expected output, we provide the model with an example input description and a corresponding example output. Although this may increase the number of tokens used (and thus the cost of the call), it helps to guide the model and results in better overall performance.\n",
    "\n",
    "By following this structured approach, we aim to obtain precise and useful information from the `gpt-4-vision-preview` model for further analysis and integration into our database."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def analyze_image(image_base64, subcategories):\n",
    "    response = client.chat.completions.create(\n",
    "        model=GPT_MODEL,\n",
    "        messages=[\n",
    "            {\n",
    "            \"role\": \"user\",\n",
    "            \"content\": [\n",
    "                {\n",
    "                \"type\": \"text\",\n",
    "                \"text\": \"\"\"Given an image of an item of clothing, analyze the item and generate a JSON output with the following fields: \"items\", \"category\", and \"gender\". \n",
    "                           Use your understanding of fashion trends, styles, and gender preferences to provide accurate and relevant suggestions for how to complete the outfit.\n",
    "                           The items field should be a list of items that would go well with the item in the picture. Each item should represent a title of an item of clothing that contains the style, color, and gender of the item.\n",
    "                           The category needs to be chosen between the types in this list: {subcategories}.\n",
    "                           You have to choose between the genders in this list: [Men, Women, Boys, Girls, Unisex]\n",
    "                           Do not include the description of the item in the picture. Do not include the ```json ``` tag in the output.\n",
    "                           \n",
    "                           Example Input: An image representing a black leather jacket.\n",
    "\n",
    "                           Example Output: {\"itmes\": [\"Fitted White Women's T-shirt\", \"White Canvas Sneakers\", \"Women's Black Skinny Jeans\"], \"category\": \"Jackets\", \"gender\": \"Women\"}\n",
    "                           \"\"\",\n",
    "                },\n",
    "                {\n",
    "                \"type\": \"image_url\",\n",
    "                \"image_url\": {\n",
    "                    \"url\": f\"data:image/jpeg;base64,{image_base64}\",\n",
    "                },\n",
    "                }\n",
    "            ],\n",
    "            }\n",
    "        ],\n",
    "        max_tokens=300,\n",
    "    )\n",
    "    # Extract relevant features from the response\n",
    "    features = response.choices[0].message.content\n",
    "    return features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Testing the Prompt with Sample Images\n",
    "\n",
    "To evaluate the effectiveness of our prompt, let's load and test it with a selection of images from our dataset. We'll use images from the `\"data/clothes/images\"` folder, ensuring a variety of styles, genders, and types. Here are the chosen samples:\n",
    "\n",
    "- `2103.jpg`: Men's shirt\n",
    "- `2119.jpg`: Women's shirt\n",
    "- `1844.jpg`: Casual men's printed t-shirt\n",
    "- `1941.jpg`: Bag\n",
    "- `2589.jpg`: Hat\n",
    "- `2874.jpg`: Women's sandals\n",
    "\n",
    "By testing the prompt with these diverse images, we can assess its ability to accurately analyze and extract relevant features from different types of clothing items and accessories."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We need a util function to encode the .jpg images in base64"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import base64\n",
    "\n",
    "def encode_image_to_base64(image_path):\n",
    "    with open(image_path, 'rb') as image_file:\n",
    "        encoded_image = base64.b64encode(image_file.read())\n",
    "        return encoded_image.decode('utf-8')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set the path to the images and select a test image\n",
    "image_path = \"data/clothes/images/\"\n",
    "test_images = [\"2103.jpg\", \"2119.jpg\", \"1844.jpg\", \"1941.jpg\", \"2589.jpg\", \"2874.jpg\"]\n",
    "\n",
    "# Encode the test image to base64\n",
    "reference_image = image_path + test_images[0]\n",
    "encoded_image = encode_image_to_base64(reference_image)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/jpeg": "/9j/4AAQSkZJRgABAQAAZABkAAD/7AARRHVja3kAAQAEAAAADwAA/9sAQwAMCAkLCQgMCwoLDg0MDhIeFBIRERIlGxwWHiwnLi4rJysqMTdGOzE0QjQqKz1TPkJISk5PTi87VlxVTFtGTU5L/9sAQwENDg4SEBIkFBQkSzIrMktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tL/8AAEQgAUAA8AwEiAAIRAQMRAf/EABsAAAICAwEAAAAAAAAAAAAAAAAGBAUBAgcD/8QANRAAAgEDAgMHAQQLAAAAAAAAAQIDAAQRBSESMUEGEyJRYYGRcQcyodEUFiMzUmJyscHw8f/EABcBAAMBAAAAAAAAAAAAAAAAAAABAgP/xAAdEQACAgIDAQAAAAAAAAAAAAAAAQIRAxIhMUFh/9oADAMBAAIRAxEAPwDqlFFFAHjd3UNlay3NzIscMSlnduQArmGpfajeyXEqafbRxwFsRO6lmx5npvTn9oNvJddkb+KEZYhCR5gOCaVdAk063s2EsPA0I8WY8k9NveplPXw1x49/Rl7E9qh2itpEmjEd5AB3gHJh5jypnrnnZayH65G7toXS2e2ZicYHETjf4rodNO1ZEo6ugooopkhRRUe8vIrOMNJuT91RzNAG91FHPbyRTAGN1Ibi5Yrn1jcSTSzkmJwq92uBscHz5fNXuq6hd3kLRxOIlYEYHXbqetKltYS2QCFnMszKgIJ4SxGCT6bZqckG1Ztgyauh57MvFPA8vConzwtwjAx6Vd0k6fBLZzuYZmWAoiqnVWXbPuMZ+lXltqsqHEvjX4NWoUqMpS2dl1RWFYMoZTkEZFZpCClTWrvvdSlBPhiHAPbc/wC+lNdJNx+0knc82Yt6g5NVETMWsokiVgcg716hB3qEnGMkfFUXZqSVbKCN98liPRcnH4VfKMupOcAHl9NqsDYMeIKFY569BWXk4HVepz8VhTtUOaXGqrHw84QSfc0CG/SpO8sk/lJFTKq9BkzDInk2atKzfZSNZG4I2b+EE0jyzK0bFcqzjAGN8naneb9zJ/Sf7UjOYxHE8rFVR0YsN8YYVURMxHbRWt7PDCMRQsUXPkNqlQkcPEQSDk/lUFHLiVz9+Vjn6k1NQhdsZAGKYG6nnUHVQY57KdVY8XFGcb77H/NS1OxqPq4IsIZgpbu5xkDngqfyFNCLvs7K/flSBwsuTv1phpb7PkC5j32KHHrtTJUS7GjSeMTQyRE4DqVyPWke6RVjZZASoOCANtv+U90g6jdob+6s0WbvEdg2fDsc9fIg9KSko9lKLk6Rpb44g2djv71JR8ShSAcg7UvDX7G2kELys3Cd3jXiX8Kmxa7pUsgK30QIU7MSvl54rT6T8LdOded6vHp065w0ZSQezYI+DUNNZ08jIvID9Hr0XVrO7a4sYyGea3cpIdl4l8QHuAaBFz2cif8ASYsnAVSxAGBypopY7LSq9wVXPhjO5PqKZ6zbT5RTi48M/9k=",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'items': [\"Men's Straight-fit Dark Jeans\", \"Men's Brown Leather Belt\", \"Men's Classic White Sneakers\"], 'category': 'Shirts', 'gender': 'Men'}\n"
     ]
    }
   ],
   "source": [
    "# Select the unique subcategories from the DataFrame\n",
    "unique_subcategories = styles_df['articleType'].unique()\n",
    "\n",
    "# Analyze the image and return the results\n",
    "analysis = analyze_image(encoded_image, unique_subcategories)\n",
    "image_analysis = json.loads(analysis)\n",
    "\n",
    "# Display the image and the analysis results\n",
    "display(Image(filename=reference_image))\n",
    "print(image_analysis)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we process the output from the image analysis and use it to filter and display matching items from our dataset. Here's a breakdown of the code:\n",
    "\n",
    "1. **Extracting Image Analysis Results**: We extract the item descriptions, category, and gender from the `image_analysis` dictionary.\n",
    "\n",
    "2. **Filtering the Dataset**: We filter the `styles_df` DataFrame to include only items that match the gender from the image analysis (or are unisex) and exclude items of the same category as the analyzed image.\n",
    "\n",
    "3. **Finding Matching Items**: We use the `find_matching_items_with_rag` function to find items in the filtered dataset that match the descriptions extracted from the analyzed image.\n",
    "\n",
    "4. **Displaying Matching Items**: We create an HTML string to display images of the matching items. We construct the image paths using the item IDs and append each image to the HTML string. Finally, we use `display(HTML(html))` to render the images in the notebook.\n",
    "\n",
    "This cell effectively demonstrates how to use the results of image analysis to filter a dataset and visually display items that match the analyzed image's characteristics."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13973 Remaining Items\n",
      "[\"Men's Straight-fit Dark Jeans\", \"Men's Brown Leather Belt\", \"Men's Classic White Sneakers\"]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<img src=\"data/clothes/images/52235.jpg\" style=\"display:inline;margin:1px\"/><img src=\"data/clothes/images/44585.jpg\" style=\"display:inline;margin:1px\"/><img src=\"data/clothes/images/24504.jpg\" style=\"display:inline;margin:1px\"/><img src=\"data/clothes/images/24501.jpg\" style=\"display:inline;margin:1px\"/><img src=\"data/clothes/images/1917.jpg\" style=\"display:inline;margin:1px\"/><img src=\"data/clothes/images/6670.jpg\" style=\"display:inline;margin:1px\"/>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Extract the relevant features from the analysis\n",
    "item_descs = image_analysis['items']\n",
    "item_category = image_analysis['category']\n",
    "item_gender = image_analysis['gender']\n",
    "\n",
    "\n",
    "# Filter data such that we only look through the items of the same gender (or unisex) and different category\n",
    "filtered_items = styles_df.loc[styles_df['gender'].isin([item_gender, 'Unisex'])]\n",
    "filtered_items = filtered_items[filtered_items['articleType'] != item_category]\n",
    "print(str(len(filtered_items)) + \" Remaining Items\")\n",
    "\n",
    "# Find the most similar items based on the input item descriptions\n",
    "matching_items = find_matching_items_with_rag(filtered_items, item_descs)\n",
    "\n",
    "# Display the matching items (this will display 2 items for each description in the image analysis)\n",
    "html = \"\"\n",
    "paths = []\n",
    "for i, item in enumerate(matching_items):\n",
    "    item_id = item['id']\n",
    "        \n",
    "    # Path to the image file\n",
    "    image_path = f'data/clothes/images/{item_id}.jpg'\n",
    "    paths.append(image_path)\n",
    "    html += f'<img src=\"{image_path}\" style=\"display:inline;margin:1px\"/>'\n",
    "\n",
    "# Print the matching item description as a reminder of what we are looking for\n",
    "print(item_descs)\n",
    "# Display the image\n",
    "display(HTML(html))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Guardrails\n",
    "\n",
    "In the context of using Large Language Models (LLMs) like GPTv, \"guardrails\" refer to mechanisms or checks put in place to ensure that the model's output remains within desired parameters or boundaries. These guardrails are crucial for maintaining the quality and relevance of the model's responses, especially when dealing with complex or nuanced tasks.\n",
    "\n",
    "Guardrails are useful for several reasons:\n",
    "\n",
    "1. **Accuracy**: They help ensure that the model's output is accurate and relevant to the input provided.\n",
    "2. **Consistency**: They maintain consistency in the model's responses, especially when dealing with similar or related inputs.\n",
    "3. **Safety**: They prevent the model from generating harmful, offensive, or inappropriate content.\n",
    "4. **Contextual Relevance**: They ensure that the model's output is contextually relevant to the specific task or domain it is being used for.\n",
    "\n",
    "In our case, we are using GPTv to analyze fashion images and suggest items that would complement an original outfit. To implement guardrails, we can:\n",
    "\n",
    "1. **Refine Results**: After obtaining initial suggestions from GPTv, we can send the original image and the suggested items back to the model. We can then ask GPTv to evaluate whether each suggested item would indeed be a good fit for the original outfit.\n",
    "2. **Feedback Loop**: This creates a feedback loop where the model's initial output is used as input for further refinement. This process can be repeated as necessary to improve the accuracy and relevance of the suggestions.\n",
    "\n",
    "This gives the model the ability to self-correct and adjust its own output based on feedback or additional information. By implementing these guardrails and enabling self-correction, we can enhance the reliability and usefulness of the model's output in the context of fashion analysis and recommendation.\n",
    "\n",
    "To facilitate this, we write a prompt that asks the LLM for a simple \"yes\" or \"no\" answer to the question of whether the suggested items match the original outfit or not. This binary response helps streamline the refinement process and ensures clear and actionable feedback from the model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "def check_match(reference_image_base64, suggested_image_base64):\n",
    "    response = client.chat.completions.create(\n",
    "        model=GPT_MODEL,\n",
    "        messages=[\n",
    "            {\n",
    "            \"role\": \"user\",\n",
    "            \"content\": [\n",
    "                {\n",
    "                \"type\": \"text\",\n",
    "                \"text\": \"\"\" You will be given two images of two different items of clothing.\n",
    "                            Your goal is to decide if the items in the images would work in an outfit together.\n",
    "                            The first image is the reference item (the item that the user is trying to match with another item).\n",
    "                            You need to decide if the second item would work well with the reference item.\n",
    "                            Your response must be a JSON output with the following fields: \"answer\", \"reason\".\n",
    "                            The \"answer\" field must be either \"yes\" or \"no\", depending on whether you think the items would work well together.\n",
    "                            The \"reason\" field must be a short explanation of your reasoning for your decision. Do not include the descriptions of the 2 images.\n",
    "                            Do not include the ```json ``` tag in the output.\n",
    "                           \"\"\",\n",
    "                },\n",
    "                {\n",
    "                \"type\": \"image_url\",\n",
    "                \"image_url\": {\n",
    "                    \"url\": f\"data:image/jpeg;base64,{reference_image_base64}\",\n",
    "                },\n",
    "                },\n",
    "                {\n",
    "                \"type\": \"image_url\",\n",
    "                \"image_url\": {\n",
    "                    \"url\": f\"data:image/jpeg;base64,{suggested_image_base64}\",\n",
    "                },\n",
    "                }\n",
    "            ],\n",
    "            }\n",
    "        ],\n",
    "        max_tokens=300,\n",
    "    )\n",
    "    # Extract relevant features from the response\n",
    "    features = response.choices[0].message.content\n",
    "    return features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, let's determine which of the items identified above truly complement the outfit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/jpeg": "/9j/4AAQSkZJRgABAQEASABIAAD/7Re2UGhvdG9zaG9wIDMuMAA4QklNBAQAAAAAAA8cAVoAAxslRxwCAAACyZYAOEJJTQQlAAAAAAAQR4aQySZlwmRcNa01NLvMqzhCSU0EOgAAAAAAkwAAABAAAAABAAAAAAALcHJpbnRPdXRwdXQAAAAFAAAAAENsclNlbnVtAAAAAENsclMAAAAAUkdCQwAAAABJbnRlZW51bQAAAABJbnRlAAAAAENscm0AAAAATXBCbGJvb2wBAAAAD3ByaW50U2l4dGVlbkJpdGJvb2wAAAAAC3ByaW50ZXJOYW1lVEVYVAAAAAEAAAA4QklNBDsAAAAAAbIAAAAQAAAAAQAAAAAAEnByaW50T3V0cHV0T3B0aW9ucwAAABIAAAAAQ3B0bmJvb2wAAAAAAENsYnJib29sAAAAAABSZ3NNYm9vbAAAAAAAQ3JuQ2Jvb2wAAAAAAENudENib29sAAAAAABMYmxzYm9vbAAAAAAATmd0dmJvb2wAAAAAAEVtbERib29sAAAAAABJbnRyYm9vbAAAAAAAQmNrZ09iamMAAAABAAAAAAAAUkdCQwAAAAMAAAAAUmQgIGRvdWJAb+AAAAAAAAAAAABHcm4gZG91YkBv4AAAAAAAAAAAAEJsICBkb3ViQG/gAAAAAAAAAAAAQnJkVFVudEYjUmx0AAAAAAAAAAAAAAAAQmxkIFVudEYjUmx0AAAAAAAAAAAAAAAAUnNsdFVudEYjUHhsQFIAAAAAAAAAAAAKdmVjdG9yRGF0YWJvb2wBAAAAAFBnUHNlbnVtAAAAAFBnUHMAAAAAUGdQQwAAAABMZWZ0VW50RiNSbHQAAAAAAAAAAAAAAABUb3AgVW50RiNSbHQAAAAAAAAAAAAAAABTY2wgVW50RiNQcmNAWQAAAAAAADhCSU0D7QAAAAAAEABIAAAAAQACAEgAAAABAAI4QklNBCYAAAAAAA4AAAAAAAAAAAAAP4AAADhCSU0EDQAAAAAABAAAAB44QklNBBkAAAAAAAQAAAAeOEJJTQPzAAAAAAAJAAAAAAAAAAABADhCSU0nEAAAAAAACgABAAAAAAAAAAI4QklNA/UAAAAAAEgAL2ZmAAEAbGZmAAYAAAAAAAEAL2ZmAAEAoZmaAAYAAAAAAAEAMgAAAAEAWgAAAAYAAAAAAAEANQAAAAEALQAAAAYAAAAAAAE4QklNA/gAAAAAAHAAAP////////////////////////////8D6AAAAAD/////////////////////////////A+gAAAAA/////////////////////////////wPoAAAAAP////////////////////////////8D6AAAOEJJTQQIAAAAAAAQAAAAAQAAAkAAAAJAAAAAADhCSU0EHgAAAAAABAAAAAA4QklNBBoAAAAAAzcAAAAGAAAAAAAAAAAAAAWgAAAEOAAAAAEAMQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAEOAAABaAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAQAAAAAAAG51bGwAAAACAAAABmJvdW5kc09iamMAAAABAAAAAAAAUmN0MQAAAAQAAAAAVG9wIGxvbmcAAAAAAAAAAExlZnRsb25nAAAAAAAAAABCdG9tbG9uZwAABaAAAAAAUmdodGxvbmcAAAQ4AAAABnNsaWNlc1ZsTHMAAAABT2JqYwAAAAEAAAAAAAVzbGljZQAAABIAAAAHc2xpY2VJRGxvbmcAAAAAAAAAB2dyb3VwSURsb25nAAAAAAAAAAZvcmlnaW5lbnVtAAAADEVTbGljZU9yaWdpbgAAAA1hdXRvR2VuZXJhdGVkAAAAAFR5cGVlbnVtAAAACkVTbGljZVR5cGUAAAAASW1nIAAAAAZib3VuZHNPYmpjAAAAAQAAAAAAAFJjdDEAAAAEAAAAAFRvcCBsb25nAAAAAAAAAABMZWZ0bG9uZwAAAAAAAAAAQnRvbWxvbmcAAAWgAAAAAFJnaHRsb25nAAAEOAAAAAN1cmxURVhUAAAAAQAAAAAAAG51bGxURVhUAAAAAQAAAAAAAE1zZ2VURVhUAAAAAQAAAAAABmFsdFRhZ1RFWFQAAAABAAAAAAAOY2VsbFRleHRJc0hUTUxib29sAQAAAAhjZWxsVGV4dFRFWFQAAAABAAAAAAAJaG9yekFsaWduZW51bQAAAA9FU2xpY2VIb3J6QWxpZ24AAAAHZGVmYXVsdAAAAAl2ZXJ0QWxpZ25lbnVtAAAAD0VTbGljZVZlcnRBbGlnbgAAAAdkZWZhdWx0AAAAC2JnQ29sb3JUeXBlZW51bQAA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2AnZuc5y3OmYtGE8sbU2l1xJDWiBDQ36Lfotb/VTOI7Jp0kkkklKSSSSUpJJJJT/AP/Q9VSSSSUpJJJJSkkkklOPdbXm2S51TaWEgFzwLBps0r02O+l9NLFLRn11erXYw61bHy+Wtd7bGtc72t93vVy3peJYSYc0n91x/I7c1Fpw6aTubuJHiUKTbzNdjMTqmZdm49JyrLnkWk+m81/Qp2+v+jsZ6Da2767VqdPqqtvZZjUMoqDi97g4vLjB9oj9Cz3P3e11i2UkVWpJJJJCkkkklKSSSSU//9n/4Q4SaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLwA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/PiA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJBZG9iZSBYTVAgQ29yZSA1LjAtYzA2MSA2NC4xNDA5NDksIDIwMTAvMTIvMDctMTA6NTc6MDEgICAgICAgICI+IDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+IDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdFJlZj0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlUmVmIyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczpjcnM9Imh0dHA6Ly9ucy5hZG9iZS5jb20vY2FtZXJhLXJhdy1zZXR0aW5ncy8xLjAvIiB4bWxuczpwaG90b3Nob3A9Imh0dHA6Ly9ucy5hZG9iZS5jb20vcGhvdG9zaG9wLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1wTU06T3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOjhBMDlFMEQwQTA3Q0UxMTE5MDcyQjJBREQyOTg1Mjg2IiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjI4MTIwQUJDQzk4NDExRTFCNDc0RkQ5REQ4NEU3OTE2IiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjQwMTU4RjM2ODlDOUUxMTE5Q0FBQUU5REZGRUQ5RjNCIiB4bXA6Q3JlYXRvclRvb2w9IkFkb2JlIFBob3Rvc2hvcCBDUzUuMSBXaW5kb3dzIiB4bXA6Q3JlYXRlRGF0ZT0iMjAxMi0wNy0wOVQxMDozODo0NCswNTozMCIgeG1wOk1vZGlmeURhdGU9IjIwMTItMDctMDlUMTE6MjI6MjcrMDU6MzAiIHhtcDpNZXRhZGF0YURhdGU9IjIwMTItMDctMDlUMTE6MjI6MjcrMDU6MzAiIGNyczpBbHJlYWR5QXBwbGllZD0iVHJ1ZSIgcGhvdG9zaG9wOkNvbG9yTW9kZT0iMyIgZGM6Zm9ybWF0PSJpbWFnZS9qcGVnIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6NDREOTUwMTJBRUMxRTExMUEwMTM4MjM1RENBNkVCQjgiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6OEEwOUUwRDBBMDdDRTExMTkwNzJCMkFERDI5ODUyODYiLz4gPHhtcE1NOkhpc3Rvcnk+IDxyZGY6U2VxPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6NDAxNThGMzY4OUM5RTExMTlDQUFBRTlERkZFRDlGM0IiIHN0RXZ0OndoZW49IjIwMTItMDctMDlUMTE6MjI6MjcrMDU6MzAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCBDUzUuMSBXaW5kb3dzIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDwvcmRmOlNlcT4gPC94bXBNTTpIaXN0b3J5PiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg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",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The items match!\n",
      "The items consist of a classic button-up shirt and a pair of jeans, which are both versatile pieces that typically pair well together for a casual or smart-casual look.\n"
     ]
    },
    {
     "data": {
      "image/jpeg": "/9j/4AAQSkZJRgABAQAAAQABAAD/7AARRHVja3kAAQAEAAAAZAAA/+EAGEV4aWYAAElJKgAIAAAAAAAAAAAAAAD/4QNpaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLwA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/PiA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJBZG9iZSBYTVAgQ29yZSA1LjAtYzA2MSA2NC4xNDA5NDksIDIwMTAvMTIvMDctMTA6NTc6MDEgICAgICAgICI+IDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+IDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdFJlZj0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlUmVmIyIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InV1aWQ6MjExQUQ0Q0FBRTQwRTAxMTlGMzdERDJFRjA1ODEzREYiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6NjI2RTMwNjk2RDlEMTFFMTlFMTc4MEQ0MzE1MTEzQkIiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6NjI2RTMwNjg2RDlEMTFFMTlFMTc4MEQ0MzE1MTEzQkIiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNS4xIFdpbmRvd3MiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDpBRDRBOEEyNkIwNjZFMTExQkM4QjlFNTE4ODdBQUVBNSIgc3RSZWY6ZG9jdW1lbnRJRD0idXVpZDoyMTFBRDRDQUFFNDBFMDExOUYzN0REMkVGMDU4MTNERiIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9y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",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The items match!\n",
      "The sneakers are casual and the shirt is also casual in style, making them a suitable match for a relaxed outfit.\n"
     ]
    },
    {
     "data": {
      "image/jpeg": "",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The items match!\n",
      "The shirt is a neutral and versatile color that can easily be paired with different styles and colors of shoes. The shoes have a casual design that matches the casual style of the shirt, making them a good match for a relaxed outfit.\n"
     ]
    },
    {
     "data": {
      "image/jpeg": "",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The items match!\n",
      "The items in the images appear to be a button-up shirt and a pair of jeans, which are commonly paired together in casual outfits. The shirt's color and the jeans' style do not clash and would typically be considered a suitable match for a coordinated look.\n"
     ]
    }
   ],
   "source": [
    "# Select the unique paths for the generated images\n",
    "paths = list(set(paths))\n",
    "\n",
    "for path in paths:\n",
    "    # Encode the test image to base64\n",
    "    suggested_image = encode_image_to_base64(path)\n",
    "    \n",
    "    # Check if the items match\n",
    "    match = json.loads(check_match(encoded_image, suggested_image))\n",
    "    \n",
    "    # Display the image and the analysis results\n",
    "    if match[\"answer\"] == 'yes':\n",
    "        display(Image(filename=path))\n",
    "        print(\"The items match!\")\n",
    "        print(match[\"reason\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can observe that the initial list of potential items has been further refined, resulting in a more curated selection that aligns well with the outfit. Additionally, the model provides explanations for why each item is considered a good match, offering valuable insights into the decision-making process."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Conclusion\n",
    "\n",
    "In this Jupyter Notebook, we explored the application of GPT-4-vision and other machine learning techniques to the domain of fashion. We demonstrated how to analyze images of clothing items, extract relevant features, and use this information to find matching items that complement an original outfit. Through the implementation of guardrails and self-correction mechanisms, we refined the model's suggestions to ensure they are accurate and contextually relevant.\n",
    "\n",
    "This approach has several practical uses in the real world, including:\n",
    "\n",
    "1. **Personalized Shopping Assistants**: Retailers can use this technology to offer personalized outfit recommendations to customers, enhancing the shopping experience and increasing customer satisfaction.\n",
    "2. **Virtual Wardrobe Applications**: Users can upload images of their own clothing items to create a virtual wardrobe and receive suggestions for new items that match their existing pieces.\n",
    "3. **Fashion Design and Styling**: Fashion designers and stylists can use this tool to experiment with different combinations and styles, streamlining the creative process.\n",
    "\n",
    "However, one of the considerations to keep in mind is **cost**. The use of LLMs and image analysis models can incur costs, especially if used extensively. It's important to consider the cost-effectiveness of implementing these technologies. gpt-4-vision-preview is priced at $0.01 per 1000 tokens [\\[ref\\]](https://openai.com/pricing). This adds up to $0.00255 for one 256px x 256px image.\n",
    "\n",
    "Overall, this notebook serves as a foundation for further exploration and development in the intersection of fashion and AI, opening doors to more personalized and intelligent fashion recommendation systems."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
